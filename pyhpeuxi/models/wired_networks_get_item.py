# coding: utf-8

"""
    HPE Aruba Networking UXI Configuration

    This document outlines the API contracts for HPE Aruba Networking UXI.

    The version of the OpenAPI document: 6.5.0
    Contact: support@capenetworks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pyhpeuxi.models.ip_version import IpVersion
from typing import Optional, Set
from typing_extensions import Self

class WiredNetworksGetItem(BaseModel):
    """
    WiredNetworksGetItem
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier of the wired network")
    name: StrictStr = Field(description="The name of the wired network")
    ip_version: IpVersion = Field(description="The IP version of the wired network", alias="ipVersion")
    created_at: datetime = Field(description="The creation timestamp of the wired network", alias="createdAt")
    updated_at: datetime = Field(description="The last update timestamp of the wired network", alias="updatedAt")
    security: Optional[StrictStr]
    dns_lookup_domain: Optional[StrictStr] = Field(alias="dnsLookupDomain")
    disable_edns: StrictBool = Field(description="Whether EDNS is disabled for the wired network", alias="disableEdns")
    use_dns64: StrictBool = Field(description="Whether DNS64 is used for the wired network", alias="useDns64")
    external_connectivity: StrictBool = Field(description="Whether the wired network has external connectivity", alias="externalConnectivity")
    v_lan_id: Optional[StrictInt] = Field(alias="vLanId")
    type: StrictStr = Field(description="The type of the resource.")
    __properties: ClassVar[List[str]] = ["id", "name", "ipVersion", "createdAt", "updatedAt", "security", "dnsLookupDomain", "disableEdns", "useDns64", "externalConnectivity", "vLanId", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['networking-uxi/wired-network']):
            raise ValueError("must be one of enum values ('networking-uxi/wired-network')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WiredNetworksGetItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if security (nullable) is None
        # and model_fields_set contains the field
        if self.security is None and "security" in self.model_fields_set:
            _dict['security'] = None

        # set to None if dns_lookup_domain (nullable) is None
        # and model_fields_set contains the field
        if self.dns_lookup_domain is None and "dns_lookup_domain" in self.model_fields_set:
            _dict['dnsLookupDomain'] = None

        # set to None if v_lan_id (nullable) is None
        # and model_fields_set contains the field
        if self.v_lan_id is None and "v_lan_id" in self.model_fields_set:
            _dict['vLanId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WiredNetworksGetItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ipVersion": obj.get("ipVersion"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "security": obj.get("security"),
            "dnsLookupDomain": obj.get("dnsLookupDomain"),
            "disableEdns": obj.get("disableEdns"),
            "useDns64": obj.get("useDns64"),
            "externalConnectivity": obj.get("externalConnectivity"),
            "vLanId": obj.get("vLanId"),
            "type": obj.get("type")
        })
        return _obj


