#
# Copyright 2025 Hewlett Packard Enterprise Development LP.
#

# coding: utf-8

"""
    HPE Aruba Networking UXI Configuration

    This document outlines the API contracts for HPE Aruba Networking UXI.

    The version of the OpenAPI document: 6.5.0
    Contact: support@capenetworks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pyhpeuxi.models.agent_pcap_mode import AgentPcapMode
from typing import Optional, Set
from typing_extensions import Self

class AgentsGetItem(BaseModel):
    """
    AgentsGetItem
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier of the agent")
    serial: StrictStr = Field(description="The serial number of the agent")
    name: StrictStr = Field(description="The name of the agent")
    model_number: Optional[StrictStr] = Field(alias="modelNumber")
    wifi_mac_address: Optional[StrictStr] = Field(alias="wifiMacAddress")
    ethernet_mac_address: Optional[StrictStr] = Field(alias="ethernetMacAddress")
    notes: Optional[StrictStr]
    pcap_mode: Optional[AgentPcapMode] = Field(alias="pcapMode")
    type: StrictStr = Field(description="The type of the resource.")
    __properties: ClassVar[List[str]] = ["id", "serial", "name", "modelNumber", "wifiMacAddress", "ethernetMacAddress", "notes", "pcapMode", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['networking-uxi/agent']):
            raise ValueError("must be one of enum values ('networking-uxi/agent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentsGetItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if model_number (nullable) is None
        # and model_fields_set contains the field
        if self.model_number is None and "model_number" in self.model_fields_set:
            _dict['modelNumber'] = None

        # set to None if wifi_mac_address (nullable) is None
        # and model_fields_set contains the field
        if self.wifi_mac_address is None and "wifi_mac_address" in self.model_fields_set:
            _dict['wifiMacAddress'] = None

        # set to None if ethernet_mac_address (nullable) is None
        # and model_fields_set contains the field
        if self.ethernet_mac_address is None and "ethernet_mac_address" in self.model_fields_set:
            _dict['ethernetMacAddress'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if pcap_mode (nullable) is None
        # and model_fields_set contains the field
        if self.pcap_mode is None and "pcap_mode" in self.model_fields_set:
            _dict['pcapMode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentsGetItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "serial": obj.get("serial"),
            "name": obj.get("name"),
            "modelNumber": obj.get("modelNumber"),
            "wifiMacAddress": obj.get("wifiMacAddress"),
            "ethernetMacAddress": obj.get("ethernetMacAddress"),
            "notes": obj.get("notes"),
            "pcapMode": obj.get("pcapMode"),
            "type": obj.get("type")
        })
        return _obj


